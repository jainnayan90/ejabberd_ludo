-module(namespace_manager).

-export([handle_stanza/1]).

-include("logger.hrl").
-include("mygame.hrl").
-include("xmpp.hrl").
-include("namespaces.hrl").



handle_stanza(#iq{to = To, lang = Lang, sub_els = [SubEl]} = Stanza) ->
    Sender = xmpp:get_from(Stanza),
    Receiver = xmpp:get_to(Stanza),
    XMLNS = xmpp:get_ns(SubEl),
    case XMLNS of 
	?NS_ACTIVEGAME ->
	    send_player_info(Sender, Receiver),
	    GameId = game_manager:get_active_game({Stanza, SubEl}),
	    GameIdEl = #xmlel{name = <<"game_id">>, attrs = [], children = [{xmlcdata, GameId}]},
	    QueryEl = #xmlel{name = <<"query">>, attrs = [], children = [GameIdEl]},
            QueryEl1 = game_utils:set_namespace(QueryEl, ?NS_ACTIVEGAME),
	    game_utils:send_result_stanza(Stanza, QueryEl1);
	?NS_PLAY_ONLINE ->
	    case  game_queries:get_player_info(?LSERVER, Sender#jid.luser) of
		{ok, [UserId, Level, Chips, ImageUrl, Name]} ->
		    game_utils:send_result_stanza(Stanza),
		    (queue_manager ! {add_player, [Sender, Level, Chips, ImageUrl, Name]});
		_ ->
		    game_utils:send_error_stanza(Stanza, #xmlel{name = <<"error">>, attrs = [], children = [{xmlcdata, <<"Invalid Player!">>}]})
	    end;
	?NS_GAME_PLAYER_RESPONSE ->
	    game_manager:send_to_game({player_response, Stanza, SubEl});
	?NS_QUIT_GAME ->
	    game_manager:send_to_game({player_quit, Stanza, SubEl});
	?NS_JOIN_ACTIVE_GAME ->
	    game_manager:send_to_game({send_game_info, Stanza, SubEl});
	?NS_DEVICE_TOKEN ->
	    ?WARNING_MSG("\n\n\n\n\n\n\n in device token namespace_manager ~p~n~n~n~n~n", [{Stanza}]),
	    game_utils:register_device_details(Stanza, SubEl);
	_ ->
	    game_utils:send_error_stanza(Stanza, #xmlel{name = <<"error">>, attrs = [], children = [{xmlcdata, <<"Invalid Stanza!">>}]})
    end;

handle_stanza(Stanza) ->
    ok.


send_player_info(Sender, Receiver) ->
    case game_queries:get_player_info(?LSERVER, Sender#jid.luser) of
	{ok, [UserId, Level, Chips, ImageUrl, Name]} ->
	    UserIdEl = #xmlel{name = <<"user_id">>, attrs = [], children = [{xmlcdata, UserId}]},
	    LevelEl = #xmlel{name = <<"level">>, attrs = [], children = [{xmlcdata, Level}]},
	    ChipsEl = #xmlel{name = <<"chips">>, attrs = [], children = [{xmlcdata, Chips}]},
	    ImageEl = #xmlel{name = <<"imageUrl">>, attrs = [], children = [{xmlcdata, ImageUrl}]},
	    NameEl = #xmlel{name = <<"name">>, attrs = [], children = [{xmlcdata, Name}]},
	    QueryEl = #xmlel{name = <<"query">>, attrs = [], children = [UserIdEl, LevelEl, ChipsEl, ImageEl, NameEl]},
	    QueryEl1 = game_utils:set_namespace(QueryEl, ?NS_PLAYERINFO),
	    Id = game_utils:get_iq_id(Sender, ?NS_PLAYERINFO),
	    Stanza = game_utils:make_iq_stanza(Id, Receiver, Sender, 'set', [QueryEl1]),
	    ejabberd_router:route(Stanza);
	_  ->
	    UserIdEl = #xmlel{name = <<"user_id">>, attrs = [], children = [{xmlcdata, <<"null">>}]},
	    QueryEl = #xmlel{name = <<"query">>, attrs = [], children = [UserIdEl]},
	    QueryEl1 = game_utils:set_namespace(QueryEl, ?NS_PLAYERINFO),
	    Id = game_utils:get_iq_id(Sender, ?NS_PLAYERINFO),
	    Stanza = game_utils:make_iq_stanza(Id, Receiver, Sender, 'set', [QueryEl1]),
	    ejabberd_router:route(Stanza)
    end.
    

